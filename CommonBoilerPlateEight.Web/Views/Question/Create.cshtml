@model QuestionSettingCreateViewModel
@{
    ViewBag.ModuleName = _CommonLocalizer["Question"];
    ViewBag.ModuleIcon = "help-circle";
    var deliveryTypes = EnumExtensions.ToDropdownList<DeliveryTypeEnum>();
    var answerTypes = EnumExtensions.ToDropdownList<AnswerTypeEnum>();
}


<div class="row card">
    <div class="col-md-12 card-body">
        <form asp-action="Create" asp-controller="Question" method="post" id="Form-Question">
            <div class="row">
                <div class="mt-3">
                    <div>
                        <div class="row mb-3">
                            <label class="col-sm-3 col-form-label">@_CommonLocalizer["Question"]</label>
                            <div class="col-sm-9">
                                <textarea asp-for="Question" class="Question form-control"></textarea>
                                <span asp-validation-for="Question" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label class="col-sm-3 col-form-label">@_CommonLocalizer["AnsType"]</label>
                            <div class="col-sm-9">
                                @Html.DropDownListFor(a => a.AnswerType, new SelectList(answerTypes, "Text", "Value"), _CommonLocalizer["Select"], new { @class = "form-control", id = "AnswerTypeDropdown" })
                                <span asp-validation-for="AnswerType" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <label class="col-sm-3 col-form-label">@_CommonLocalizer["DelType"]</label>
                            <div class="col-sm-9">
                                @Html.DropDownListFor(a => a.DeliveryType, new SelectList(deliveryTypes, "Text", "Value"), _CommonLocalizer["Select"], new { @class = "form-control" })
                                <span asp-validation-for="DeliveryType" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row mt-2 answerOptionDiv hidden">
                <div class="col-sm-12 mt-2">
                    <button type="button" class="btn btn-success btn-sm addOptionBtn">@_CommonLocalizer["AddOpt"]</button>
                </div>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-primary" id="btn-save">@_CommonLocalizer["SaveBtn"]</button>
            </div>
        </form>

    </div>
</div>

@section Scripts {
    <script>

        $('.addOptionBtn').on('click', function () {
            const optionRowLength = $(".optionRow").length;
            var newRow = `
                            <div class="row mb-3 mt-2 optionRow">
                                <div class="col-sm-10">
                                            <input type="text" class="form-control answerOption" name="Options[${optionRowLength}]" required placeholder="Option text" data-val="true" data-val-required="This field is required">
                                            <span class="text-danger field-validation-valid" data-valmsg-for="Options[${optionRowLength}]" data-valmsg-replace="true"></span>
                                </div>
                                <div class="col-sm-2">
                                    <button type="button" class="btn btn-danger btn-sm removeOptionBtn">Remove</button>
                                </div>
                            </div>
                        `;
            $('.answerOptionDiv').append(newRow);

        });


        $(document).on('click', '.removeOptionBtn', function () {
            $(this).closest('.optionRow').remove();
        });


        $('#AnswerTypeDropdown').change(function () {
            var selectedValue = $(this).val();
            if (selectedValue === 'Dropdown') {
                $('.answerOptionDiv').removeClass('hidden');
            } else {
                $('.answerOptionDiv').addClass('hidden');
                $('.optionRow').remove();
            }
        });


        $(document).on("submit", "#Form-Question", function (e) {
            debugger;
            e.preventDefault();
            var $form = $(this);
            $form.data("validator", null);
            $.validator.unobtrusive.parse($form);
            $form.validate();
            let isValid = $form.valid();
            if (!isValid) {
                return false;
            }
            var question = $('#Question').val();
            var answerType = $('#AnswerTypeDropdown').val();
            var deliveryType = $('#DeliveryType').val();

            var answerOptions = [];
            $('.answerOption').each(function () {
                answerOptions.push({
                    AnswerOption: $(this).val()
                });
            });

            var data = {
                Question: question,
                AnswerType: answerType,
                DeliveryType: deliveryType,
                AnswerOptions: answerOptions
            };

            console.log(data)
            $.ajax({
                url: '/Question/Create',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    if (response.Status == "Success") {
                        SuccessToast(response.Message);
                        window.location.href ="/Question/Index";
                    }
                    else {
                        InfoToast(response.Errors.join("\n"))
                    }
                    unblockwindow()
                },
                error: function (response) {
                    unblockwindow();
                    handleAjaxError(response)
                },
            });
        });

    </script>
}
